global:
  imagePullPolicy: Always
  environment: production
  vault:
    enabled: false
    host: vault.example.com
    name: vault
secrets:
  postgresql:
    username: store
    password: storepassword
  mongodb:
    rootUsername: root
    rootPassword: rootpassword
    reportsUsername: reports
    reportsPassword: reportspassword

frontend:
  replicas: 1
  revisionHistoryLimit: 15
  strategy:
    type: Recreate
  service:
    port: 80
  ingress:
    host: front-movsar.2sem.students-projects.ru
    path: /
    pathType: Prefix
    tls:
      secretName: 2sem-students-projects-wildcard-secret
  containerPort: 80
  image: melkoto/sausage-store-frontend:latest
  imagePullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "128Mi"
      cpu: "500m"
  nginxConf: nginx.conf

backend:
  annotations:
    path: /actuator/prometheus
    port: "8080"
    scrape: "true"
  env:
    postgresUri: jdbc:postgresql://postgresql:5432/sausage-store
    reportPath: /logs/reports
    logPath: /logs
  service:
    port: 8080
  revisionHistoryLimit: 15
  replicas: 1
  strategy:
    type: Recreate
  image: amazoncorretto:17-alpine
  imagePullPolicy: Always
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "384Mi"
      cpu: "300m"
  containerPort: 8080
  livenessProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  vpa:
    updatePolicy:
      updateMode: "Off"
    resourcePolicy:
      containerPolicies:
        - containerName: backend
          minAllowed:
            cpu: 100m
            memory: 256Mi
          maxAllowed:
            cpu: 1
            memory: 512Mi
          controlledResources: ["cpu", "memory"]

backend-report:
  replicas: 1
  revisionHistoryLimit: 15
  strategy:
    type: Recreate
  service:
    port: 8080
  env:
    PORT: "8080"
  image: golang:alpine
  imagePullPolicy: Always
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "500m"
  containerPort: 8080
  hpa:
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75

infra:
  postgresql:
    image: postgres:13
    containerPort: 5432
    env:
      POSTGRES_DB: sausage-store
      POSTGRES_USER: "{{ .Values.secrets.postgresql.username }}"
      POSTGRES_PASSWORD: "{{ .Values.secrets.postgresql.password }}"
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    storage:
      size: 1Gi
      storageClassName: yc-network-hdd
  mongodb:
    image: mongo:7.0
    env:
      MONGO_INITDB_DATABASE: sausage-store
    auth:
      rootUsername: "{{ .Values.secrets.mongodb.rootUsername }}"
      rootPassword: "{{ .Values.secrets.mongodb.rootPassword }}"
      reportsUsername: "{{ .Values.secrets.mongodb.reportsUsername }}"
      reportsPassword: "{{ .Values.secrets.mongodb.reportsPassword }}"
    containerPort: 27017
    resources:
      requests:
        memory: "128Mi"
        cpu: "50m"
      limits:
        memory: "256Mi"
        cpu: "500m"
    storage:
      size: 1Gi
      storageClassName: local-path
